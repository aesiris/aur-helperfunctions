#!/bin/bash

if [[ -f $HOME/.aur-helperfunctions.conf ]]; then
	. $HOME/.aur-helperfunctions.conf
else
	[[ "$REPONAME" ]] || echo 'please configure ~/.aur-helperfunctions.conf and resource before doing anything'
fi

: ${REPONAME:=aur}
: ${REPODIR:=$HOME/aur/repo}
: ${REPODB:=$REPODIR/${REPONAME}.db.tar.gz}
: ${SRCDIR:=$HOME/aur/src}
: ${PKGBUILDIR:=$HOME/aur/src}
: ${EXCLUDEFILE:=$HOME/aur/exclude}

if ! grep "[$REPONAME]" /etc/pacman.conf; then
	cat<<-END
		# repo $REPONAME not configured in pacman.conf 
		# paste and run this from a root shell, or add to pacman.conf the lines between EOFs
		cat >> /etc/pacman.conf <<EOF

		[$REPONAME]
		SigLevel = Optional TrustAll
		Server = file://$REPODIR
		EOF
	END
fi

aur-get() {
	echo 'getting package '$1' from AUR'
	pushd "$SRCDIR" || return 1
	[[ -e "$1.tar.gz" ]] && mv "$1.tar.gz" "$1-old.tar.gz"
	if wget -q "https://aur.archlinux.org/packages/${1:0:2}/$1/$1.tar.gz"; then
		cd "$PKGBUILDIR" && tar xf "$SRCDIR/$1.tar.gz" && cd "$1"
	else
		false
	fi
	if (($?!=0)); then
		echo "error $1" >&2
		pushd
	fi
}

aur-local-packages() {
	if [[ "$1" == "allpkg" ]]; then
		LANG=C pacman -Sl $REPONAME | awk -F " " '{ print $2,$3;}'
	else
		LANG=C pacman -Sl $REPONAME | awk -F " " '/installed/ { print $2,$3;}'
	fi
}

aur-search () {
	local json="$( wget "https://aur.archlinux.org/rpc.php?type=search&arg=$1" -o /dev/null -O - )"

	if [[ ! "$json" ]] || grep error <( jshon <<<"$json" -e type ) > /dev/null; then
		echo "Failed to search $1"
		return 1
	fi
	if [[ "$( jshon <<<"$json" -e results -l )" == 0 ]]; then
		echo "0 matching packages in AUR"
		return 1
	fi

	exec 3< <( jshon <<<"$json" -e results -a -e Name -u )
	exec 4< <( jshon <<<"$json" -e results -a -e Description -u )
	local name; local description
	while read name <&3 && read description <&4; do
		echo "$name: $description"
	done
	exec 3<&- 4<&-
}

aur-info() {
	if [[ "$1" == "-a" ]]; then
		shift
		local getver=yes
	fi

	local args=""
	local pkg
	for pkg in "$@"; do
		args+='&arg[]='"$pkg"
	done
	local json="$( wget "https://aur.archlinux.org/rpc.php?type=multiinfo${args}" -o /dev/null -O - )"

	if [[ ! "$json" ]] || grep error <( jshon <<<"$json" -e type ) > /dev/null; then
		echo "Failed to get any AUR info"
		return 1
	fi
	if [[ "$( jshon <<<"$json" -e results -l )" == 0 ]]; then
		echo "0 matching packages in AUR"
		return 1
	fi

	if [[ ! "$getver" ]]; then
		jshon <<<"$json" -e results
	else
		exec 3< <( jshon <<<"$json" -e results -a -e Name -u )
		exec 4< <( jshon <<<"$json" -e results -a -e Version -u )
		exec 5< <( jshon <<<"$json" -e results -a -e Maintainer )

		while read name <&3 && read version <&4 && read maint <&5; do
			aurversion["$name"]="$version"
			aurmaint["$name"]="$maint"
		done
		exec 3<&- 4<&- 5<&-
	fi
}

version_eq () { [[ "$1" == "$2" ]]; }
version_ge () {
        sort=$(echo -e "$1\n$2" | sort -V)
        lower=$(head -n 1 <<<"$sort")
	[[ "$2" == "$lower" ]]
}
version_gt () { ! version_eq "$1" "$2" && version_ge "$1" "$2"; }
version_ne () { ! version_eq "$1" "$2"; }
version_lt () { ! version_ge "$1" "$2"; }
version_le () { ! version_gt "$1" "$2"; }

aur-check () {
	local allpkg showall
	while [[ "$1" ]]; do
		case "$1" in
		  	"-v" ) showall=showall;;
			"-a" ) allpkg=allpkg;;
		esac
		shift
	done

	local listupdated=() listtoupdate=() listnotfound=() listnotmaintained=()
	
	local -A localversion=() 
	local -a packages=()
	local package version
	while read package version; do
		packages+=("$package")
		localversion["$package"]="$version"
	done < <( aur-local-packages "$allpkg" | grep -v -F -f "$EXCLUDEFILE" )
	
	local -A aurversion=()
	local -A aurmaint=()
	aur-info -a "${packages[@]}"
	(($?==1)) && return 1

	local aur loc
	for package in "${packages[@]}"; do
		loc="${localversion["$package"]}"
		aur="${aurversion["$package"]}"
		if [[ "$aur" ]]; then
			if version_eq "$loc" "$aur"; then
				listupdated=( "${listupdated[@]}" "$package" )
			elif version_gt "$loc" "$aur"; then
				listupdated=( "${listupdated[@]}" "$package ($loc > $aur)" )
			else
				listtoupdate=( "${listtoupdate[@]}" "$package ($loc < $aur)" )
			fi
			if [[ "${aurmaint["$package"]}" == null ]]; then
				listnotmaintained=( "${listnotmaintained[@]}" "$package" )
			fi
		else
			listnotfound=( "${listnotfound[@]}" "$package" )
		fi
	done
	
	local OLDIFS="$IFS"
		IFS=$'\n'
		local COLG="\033[1;32m" COLR="\033[1;31m" COLN="\033[0m" COLE="\033[1;39m"
		[[ "$showall" ]] && ((${#listupdated[@]}>0)) &&\
			echo -e "${COLG}Updated${COLN}\n${listupdated[*]}${COLN}"
		((${#listnotmaintained[@]}>0)) &&\
			echo -e "${COLR}Unmaintained${COLN}\n${listnotmaintained[*]}${COLN}"
		((${#listnotfound[@]}>0)) &&\
			echo -e "${COLR}Not found in AUR${COLN}\n${listnotfound[*]}${COLN}"
		((${#listtoupdate[@]}>0)) &&\
			echo -e "${COLR}To update${COLE}\n${listtoupdate[*]}${COLN}" ||\
			echo -e "${COLG}None to update${COLN}"
	IFS="$OLDIFS"
}

aur-sobump () {
	local LINKER=/lib/ld-2.16.so 
	local pkg i missing outraw outpac
	
	for pkg in $( aur-local-packages | cut -f 1 -d " " ); do
		for i in $( pacman -Qql $pkg ); do
			if $LINKER --verify "$i"; then	
				missing=$( $LINKER --list "$i" 2>&1 | grep "error while loading shared libraries" | cut -f 1,3 -d ':')
				if (( ${#missing} != 0 )); then
					outraw+="$missing\n"
					outpac+="$pkg\n"
				fi
			fi
		done
	done

	if ((${#outraw}>0)); then
		missinglibs=$( cut -f 1 -d ':' <<<"$outraw" )
		echo "Possible Rebuild:"
		echo '(type echo "$missinglibs" for missing files")'
		sort -u <<<"$outpac"
	else
		echo "No missing libraries"
	fi

}

repo-upd() {
	repo-add $(find "$REPODIR" -mtime -1 -type f -iname '*.tar.xz' )
}

repo-add() {
	command repo-add "$REPODB" "$@"
}

repo-remove() {
	command repo-remove "$REPODB" "$@"
}

makepkg() {
	if command makepkg "$@"; then
		files=(*.tar.xz)
		file="$( ( IFS=$'\n'; sort -V <<<"${files[*]}"; ) | tail -n 1 )"
		[[ -e "$file" ]] && repo-add "${file}"
	fi
}
